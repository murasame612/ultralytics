{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "yolov10转换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "训练数据集的增强和验证数据集的复制已完成，并保存到 ./datasets/data_name_augmented/\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "import albumentations as A\n",
    "import numpy as np\n",
    "import shutil\n",
    "\n",
    "# 定义数据增强方法，添加灰度化、仿射变换、背景干扰等\n",
    "transform = A.Compose([\n",
    "    A.ShiftScaleRotate(shift_limit=0.05, scale_limit=0.1, rotate_limit=20, p=0.7),  # 平移、缩放、小角度旋转\n",
    "    A.GaussianBlur(p=0.3),    # 模糊\n",
    "    A.RandomBrightnessContrast(p=0.2),  # 随机亮度和对比度\n",
    "    A.MotionBlur(blur_limit=5, p=0.2),  # 运动模糊\n",
    "    A.ImageCompression(quality_lower=70, p=0.3),  # 图像压缩模拟拍摄质量降低\n",
    "    A.CLAHE(p=0.2),  # 对比度增强\n",
    "    A.ToGray(p=1.0),  # 灰度化\n",
    "    A.Perspective(scale=(0.02, 0.05), p=0.3),  # 使用Perspective进行仿射变换\n",
    "], bbox_params=A.BboxParams(format='yolo', label_fields=['class_labels']))\n",
    "\n",
    "# 添加背景干扰方法\n",
    "def add_background_noise(image):\n",
    "    noise = np.random.normal(0, 25, image.shape).astype(np.uint8)\n",
    "    noisy_image = cv2.add(image, noise)\n",
    "    return noisy_image\n",
    "\n",
    "# 输入输出路径\n",
    "input_dir = './datasets/data_name/'\n",
    "output_dir = './datasets/data_name_augmented/'\n",
    "\n",
    "# 创建增强后的数据集文件夹结构\n",
    "if os.path.exists(output_dir):\n",
    "    shutil.rmtree(output_dir)\n",
    "for split in ['train', 'val']:\n",
    "    os.makedirs(os.path.join(output_dir, 'images', split), exist_ok=True)\n",
    "    os.makedirs(os.path.join(output_dir, 'labels', split), exist_ok=True)\n",
    "\n",
    "# 生成数据增强倍数\n",
    "num_augmentations = 10  # 生成10倍的增强样本\n",
    "\n",
    "# 处理训练集：生成增强样本\n",
    "def process_train_split():\n",
    "    image_dir = os.path.join(input_dir, 'images', 'train')\n",
    "    label_dir = os.path.join(input_dir, 'labels', 'train')\n",
    "    output_image_dir = os.path.join(output_dir, 'images', 'train')\n",
    "    output_label_dir = os.path.join(output_dir, 'labels', 'train')\n",
    "\n",
    "    for image_name in os.listdir(image_dir):\n",
    "        # 读取图片和对应的标签\n",
    "        image_path = os.path.join(image_dir, image_name)\n",
    "        label_path = os.path.join(label_dir, image_name.replace('.jpg', '.txt'))\n",
    "\n",
    "        image = cv2.imread(image_path)\n",
    "        height, width, _ = image.shape\n",
    "\n",
    "        # 读取YOLO标签\n",
    "        bboxes = []\n",
    "        class_labels = []\n",
    "        with open(label_path, 'r') as f:\n",
    "            for line in f.readlines():\n",
    "                class_id, x_center, y_center, bbox_width, bbox_height = map(float, line.strip().split())\n",
    "                bboxes.append([x_center, y_center, bbox_width, bbox_height])\n",
    "                class_labels.append(int(class_id))\n",
    "\n",
    "        # 生成多个增强样本\n",
    "        for i in range(num_augmentations):\n",
    "            # 添加背景干扰\n",
    "            image_with_noise = add_background_noise(image)\n",
    "\n",
    "            # 应用数据增强\n",
    "            transformed = transform(image=image_with_noise, bboxes=bboxes, class_labels=class_labels)\n",
    "            transformed_image = transformed['image']\n",
    "            transformed_bboxes = transformed['bboxes']\n",
    "            transformed_class_labels = transformed['class_labels']\n",
    "\n",
    "            # 保存增强后的图片，重命名以避免覆盖\n",
    "            output_image_path = os.path.join(output_image_dir, f\"{image_name.replace('.jpg', '')}_aug_{i}.jpg\")\n",
    "            cv2.imwrite(output_image_path, transformed_image)\n",
    "\n",
    "            # 保存增强后的标签\n",
    "            output_label_path = os.path.join(output_label_dir, f\"{image_name.replace('.jpg', '')}_aug_{i}.txt\")\n",
    "            with open(output_label_path, 'w') as f:\n",
    "                for bbox, class_id in zip(transformed_bboxes, transformed_class_labels):\n",
    "                    x_center, y_center, bbox_width, bbox_height = bbox\n",
    "                    f.write(f\"{class_id} {x_center} {y_center} {bbox_width} {bbox_height}\\n\")\n",
    "\n",
    "# 直接复制验证集\n",
    "def copy_val_split():\n",
    "    image_dir = os.path.join(input_dir, 'images', 'val')\n",
    "    label_dir = os.path.join(input_dir, 'labels', 'val')\n",
    "    output_image_dir = os.path.join(output_dir, 'images', 'val')\n",
    "    output_label_dir = os.path.join(output_dir, 'labels', 'val')\n",
    "\n",
    "    for image_name in os.listdir(image_dir):\n",
    "        # 复制图像\n",
    "        src_image_path = os.path.join(image_dir, image_name)\n",
    "        dst_image_path = os.path.join(output_image_dir, image_name)\n",
    "        shutil.copy(src_image_path, dst_image_path)\n",
    "\n",
    "        # 复制标签\n",
    "        label_name = image_name.replace('.jpg', '.txt')\n",
    "        src_label_path = os.path.join(label_dir, label_name)\n",
    "        dst_label_path = os.path.join(output_label_dir, label_name)\n",
    "        shutil.copy(src_label_path, dst_label_path)\n",
    "\n",
    "# 执行增强和复制操作\n",
    "process_train_split()\n",
    "copy_val_split()\n",
    "\n",
    "print(\"训练数据集的增强和验证数据集的复制已完成，并保存到\", output_dir)\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "yolo11转换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "训练和验证数据集的增强与转换已完成，结果保存到: ./datasets/data_name_augmented_obb/\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import cv2\n",
    "import albumentations as A\n",
    "import numpy as np\n",
    "import shutil\n",
    "import random\n",
    "\n",
    "# 输入输出路径\n",
    "input_dir = './datasets/data_name/'\n",
    "output_dir = './datasets/data_name_augmented_obb/'\n",
    "\n",
    "# 创建数据增强方法\n",
    "transform = A.Compose([\n",
    "    A.GaussianBlur(p=0.3),    # 模糊\n",
    "    A.RandomBrightnessContrast(p=0.2),  # 随机亮度和对比度\n",
    "    A.MotionBlur(blur_limit=5, p=0.2),  # 运动模糊\n",
    "    A.ImageCompression(quality_lower=70, p=0.3),  # 图像压缩模拟拍摄质量降低\n",
    "    A.CLAHE(p=0.2),  # 对比度增强\n",
    "    A.ToGray(p=1.0),  # 灰度化\n",
    "    A.Perspective(scale=(0.02, 0.05), p=0.3),  # 使用 Perspective 进行仿射变换\n",
    "], bbox_params=A.BboxParams(format='yolo', label_fields=['class_labels']))\n",
    "\n",
    "# 添加背景干扰\n",
    "def add_background_noise(image):\n",
    "    noise = np.random.normal(0, 25, image.shape).astype(np.uint8)\n",
    "    return cv2.add(image, noise)\n",
    "\n",
    "# 计算 OBB 格式的角点坐标\n",
    "def calculate_obb_corners(x_center, y_center, width, height, angle, w, h):\n",
    "    # 将 YOLO 坐标转换为像素坐标\n",
    "    x_center, y_center = x_center * w, y_center * h\n",
    "    width, height = width * w, height * h\n",
    "\n",
    "    # 计算旋转前的四个角点\n",
    "    corners = np.array([\n",
    "        [x_center - width / 2, y_center - height / 2],\n",
    "        [x_center + width / 2, y_center - height / 2],\n",
    "        [x_center + width / 2, y_center + height / 2],\n",
    "        [x_center - width / 2, y_center + height / 2]\n",
    "    ])\n",
    "\n",
    "    # 使用与图像相同的旋转矩阵\n",
    "    M = cv2.getRotationMatrix2D((w / 2, h / 2), angle, 1.0)\n",
    "\n",
    "    # 应用旋转矩阵\n",
    "    ones = np.ones(shape=(len(corners), 1))\n",
    "    corners_ones = np.hstack([corners, ones])\n",
    "    rotated_corners = M.dot(corners_ones.T).T\n",
    "\n",
    "    # 将角点归一化到 0 到 1 范围\n",
    "    normalized_corners = rotated_corners / np.array([w, h])\n",
    "    return normalized_corners\n",
    "\n",
    "# 旋转图像和边界框并转换为 OBB 格式\n",
    "def rotate_image_and_bbox_to_obb(image, bboxes, angle):\n",
    "    h, w = image.shape[:2]\n",
    "\n",
    "    # 旋转图像\n",
    "    M = cv2.getRotationMatrix2D((w / 2, h / 2), angle, 1.0)\n",
    "    rotated_image = cv2.warpAffine(image, M, (w, h))\n",
    "\n",
    "    rotated_bboxes = []\n",
    "    for bbox in bboxes:\n",
    "        x_center, y_center, bbox_width, bbox_height = bbox\n",
    "        corners = calculate_obb_corners(x_center, y_center, bbox_width, bbox_height, angle, w, h)\n",
    "        rotated_bboxes.append(corners.flatten())\n",
    "\n",
    "    return rotated_image, rotated_bboxes\n",
    "\n",
    "# 保存图像和标签\n",
    "def save_image_and_label(image, bboxes, image_output_path, label_output_path, class_labels):\n",
    "    cv2.imwrite(image_output_path, image)\n",
    "    with open(label_output_path, 'w') as f:\n",
    "        for corners, class_id in zip(bboxes, class_labels):\n",
    "            label = [class_id] + corners.tolist()\n",
    "            f.write(' '.join(map(str, label)) + '\\n')\n",
    "\n",
    "# 处理单个图像文件夹（如训练或验证集）\n",
    "def process_image_folder(image_dir, label_dir, output_image_dir, output_label_dir, augment=True):\n",
    "    for image_name in os.listdir(image_dir):\n",
    "        image_path = os.path.join(image_dir, image_name)\n",
    "        label_path = os.path.join(label_dir, image_name.replace('.jpg', '.txt'))\n",
    "\n",
    "        image = cv2.imread(image_path)\n",
    "        if image is None:\n",
    "            print(f\"无法读取图像: {image_path}\")\n",
    "            continue\n",
    "\n",
    "        height, width, _ = image.shape\n",
    "\n",
    "        # 读取 YOLO 格式标签\n",
    "        bboxes, class_labels = [], []\n",
    "        with open(label_path, 'r') as f:\n",
    "            for line in f.readlines():\n",
    "                class_id, x_center, y_center, bbox_width, bbox_height = map(float, line.strip().split())\n",
    "                bboxes.append([x_center, y_center, bbox_width, bbox_height])\n",
    "                class_labels.append(int(class_id))\n",
    "\n",
    "        # 生成增强样本\n",
    "        num_augmentations = 10 if augment else 1\n",
    "        for i in range(num_augmentations):\n",
    "            processed_image = add_background_noise(image) if augment else image.copy()\n",
    "            rotate_angle = random.uniform(-20, 20) if augment else random.uniform(-10, 10)\n",
    "\n",
    "            # 数据增强\n",
    "            if augment:\n",
    "                transformed = transform(image=processed_image, bboxes=bboxes, class_labels=class_labels)\n",
    "                processed_image, transformed_bboxes = transformed['image'], transformed['bboxes']\n",
    "            else:\n",
    "                transformed_bboxes = bboxes\n",
    "\n",
    "            # 旋转并转换标签为 OBB 格式\n",
    "            rotated_image, rotated_bboxes = rotate_image_and_bbox_to_obb(processed_image, transformed_bboxes, rotate_angle)\n",
    "\n",
    "            # 保存增强后的图像和 OBB 标签\n",
    "            output_image_name = f\"{image_name.replace('.jpg', '')}_aug_{i}.jpg\"\n",
    "            output_label_name = output_image_name.replace('.jpg', '.txt')\n",
    "            save_image_and_label(rotated_image, rotated_bboxes,\n",
    "                                 os.path.join(output_image_dir, output_image_name),\n",
    "                                 os.path.join(output_label_dir, output_label_name),\n",
    "                                 class_labels)\n",
    "\n",
    "# 创建增强后的数据集文件夹结构\n",
    "def setup_output_dirs():\n",
    "    if os.path.exists(output_dir):\n",
    "        shutil.rmtree(output_dir)\n",
    "    for split in ['train', 'val']:\n",
    "        os.makedirs(os.path.join(output_dir, 'images', split), exist_ok=True)\n",
    "        os.makedirs(os.path.join(output_dir, 'labels', split), exist_ok=True)\n",
    "\n",
    "# 主函数\n",
    "def main():\n",
    "    setup_output_dirs()\n",
    "    # 处理训练集\n",
    "    process_image_folder(\n",
    "        image_dir=os.path.join(input_dir, 'images', 'train'),\n",
    "        label_dir=os.path.join(input_dir, 'labels', 'train'),\n",
    "        output_image_dir=os.path.join(output_dir, 'images', 'train'),\n",
    "        output_label_dir=os.path.join(output_dir, 'labels', 'train'),\n",
    "        augment=True\n",
    "    )\n",
    "    # 处理验证集（不增强，仅旋转转换标签）\n",
    "    process_image_folder(\n",
    "        image_dir=os.path.join(input_dir, 'images', 'val'),\n",
    "        label_dir=os.path.join(input_dir, 'labels', 'val'),\n",
    "        output_image_dir=os.path.join(output_dir, 'images', 'val'),\n",
    "        output_label_dir=os.path.join(output_dir, 'labels', 'val'),\n",
    "        augment=False\n",
    "    )\n",
    "    print(\"训练和验证数据集的增强与转换已完成，结果保存到:\", output_dir)\n",
    "\n",
    "# 执行主函数\n",
    "main()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "yolov10",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.20"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
